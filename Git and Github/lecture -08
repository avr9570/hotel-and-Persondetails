Git & GitHub
Git is like a time machine for your code.
It is a tool that keeps a record of every version of your code, so you can always go back to a previous state if something goes wrong.
Install Git: If you haven't already, download and install Git on your computer. You can get it from the official Git website
If you want to work with git in your project→
Run git init inside the root folder of your project
This command tells Git to start tracking changes in your project folder.turns all files to green. it means it is watching all the folder and taking a look ki what changes are being done what file id added but not commiting it. its like adding tracker to all the folder
git status

git status - tells the staus of the codde, if it is commited or not. if some folder appears red means those are untacked folders not added to the git. not saved to it,
After making changes to your project (e.g., writing code), you'll want to save those changes in Git.
git add
The means "add all changes." You can replace it with specific file names with the '.'
git keeps the snapsshots of every version of code to the root directory
we never save node modules becoz it has high storage also it the files we req locally to run code but it is automatically managed by npm we dont neeed to save it. we dont track it ki ham usmai kya changes karre hai. we dont change it. so git ignore such folder

GIT IGNORE
gitignore
The.gitignore file is a special configuration file used in Git repositories to specify files and directories that should be ignored by Git.
These ignored files and directories won't be tracked by Git or included in version control.
Create.gitignore File
#Ignore node_modules directory
node_modules/
#other entries

~ this savea a snapshot of your project's current state.
git commit -m "initial commit"

~to remove node_modules after adding it to git add. is = git rm -r --cached node_modules
-------------------------------------------------
If you want to collaborate with others or back up your code online, or save this local code online you can create a remote repository on platforms like GitHub
Link Your Local and Remote Repositories
If you created a remote repository, you can link it to your local one
git remote add origin https://github.com/yourusername/hotels.git
Push Changes to Remote
To send your local commits to the remote repository, use the git push command, bcoz evern after commiting the code it get commited to the local git but does not get updated at repo. so use git push to that commit in repo also
git push -u origin master.
THIS CODE LOCALLY CAN BE PUSHED ON REMOTE REPO CONTINUSOUSLY 
PULL CHANGES
if you are collaborating with others you can fetch their changes and merge them into your code using git pull.

HOST MONGODB DATABASE   :
Now we are running locally MongoDB database. we are talking about db.js file
All data operation is performed in a local database, so let's host our database server and make our DB online presence so that data stored in db can also be accessed online
MongoDB Atlas provides a Free cluster for users where you can host your database for free.
MongoDB Atlas offers a cloud-based platform for hosting MongoDB databases
The free tier allows developers to explore and experiment with the database without incurring any costs.
LIKE WE HAVE A LOCAL SERVER OF DATABSE SO WE ARE ACCESSING DATA LOCALLY BY GOING IN MONGODB COMPASS. SO SETUP A ONLINE SERVER OF DATABSE TO ACCESSS DATA ONLINE. db.js is the local sever of the database and it has a mongourl, replace it by online server link then good to go
https://www.mongodb.com/atlas/database
Create an account for free (I already have an account)
Show Step-by-step Process to host MongoDB Atlas

------------------------------------------------------------------------------------------------
since while hosting db online we have put password of it in the url and simply pushed to git but it is very risky as someonce can access it. so we need to hide n then commit such info to git

DOTENV

The dotenv module in Node.js is used to manage configuration variables and sensitive information in your applications.
It's particularly useful for keeping sensitive data like PORT NUMBER OF THE NODE SERVER(3000), API keys, database connection strings, and other environment-specific configurations separate from your code.
npm install dotenv
Create a .env File to use dotenv festure
This is where you'll store your environment-specific configuration variables.
format VAR_NAME=value.

EG- 
PORT-3000
API_KEY=your-api-key
DB_CONNECTION_STRING=your-db-connection-string

In your server file (usually the main entry point of your application), require and configure the dotenv module.

require('dotenv').config(); //use this so that your server should also indentify the .env file variables so configuration is required. so add this line in server.js file (here server1.js. ONCE THIS .ENV FILE IS LOADED THEN ALL VARIABLES IN IT WILL BE TAKEN BY SERVER.JS FLE)
use this require line in both server1.js and db.js here in our case 
~ add .env file to gitignore
Remember to keep your env file secure and never commit it to a public version control system like Git, as it may contain sensitive information. Typically, you should include the env file in your project's .gitignore file to prevent accidental commits.

Test MongoDB Cluster Postman

Now we can test the MongoDB Cluster and check whether our data is present or not in the online DB

Host NodeJS Server

Now we are going to host our server so that our Application or Endpoints is accessible to all the user over the Internet.
We are using localhost and our endpoints are only accessible within our computer
We have to make it publicly available, so there are lots of company who helps us to make our application run 24*7
Like, AWS, Google Cloud, etc. bût these charge too much amount for our application
So we are going to use some free services to host our nodeJS application, which lots of company provides for developer purpose.
Like, Heroku, Netlify, Render, etc
-----------------------------------------------------------------------
we want to shift app to a machine  having the node server runnig 24/7 so that code can be access or app can be run always even if local system is off so we have to shift our server remotelly like shift db and node server online and deplot it
locallly to acces our server we hit localhost:3000 in browser url but to host online we haev to deploy online so that everyonce can access it
so lets host the node server online for that i will use RENDER.
in RENDER  where we host the original node server to a online machine's server that runs 24/7 bcoz that machine is active always and owener by them we just give our code to that machine
~ here in local system we decide the port number by ourself n give it to the server and run our server on it but similarly for online server that has their own port number on whcih the server will be hosted which can be 3000 or may be not hence we use:
const PORT = process.env.PORT || 3000;
means macchine will run on that port given by them or run on default one
